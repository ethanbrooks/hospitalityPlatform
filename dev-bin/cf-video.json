{
	"Description": "(Cloudfront-as-default-01) Simple VOD CloudFront distribution with an S3 origin and MediaConvert",
	"Parameters": {
		"InputPrefix": {
			"Default": "input/",
			"Type": "String",
			"Description": "The watch folder for incoming files in the above bucket"
		},
		"PackageType": {
			"Default": "BOTH",
			"Type": "String",
			"ConstraintDescription": "must specify HLS or DASH or BOTH.",
			"Description": "VOD Packaging Type.",
			"AllowedValues": ["HLS", "DASH", "BOTH"]
		},
		"EmailAddress": {
			"AllowedPattern": "[^\\s@]+@[^\\s@]+\\.[^\\s@]+",
			"Type": "String",
			"Description": "The email address where you will be notified on transcoding job status"
		},
		"BucketName": {
			"AllowedPattern": ".+",
			"Type": "String",
			"Description": "Bucket Name Prefix. The bucket created would be {BucketName}-AWSAccountId-AWSRegion"
		},
		"OutputPrefix": {
			"Default": "output/",
			"Type": "String",
			"Description": "The output folder for processing files in the above bucket"
		}
	},
	"AWSTemplateFormatVersion": "2010-09-09",
	"Outputs": {
		"DASHPresets": {
			"Value": {
				"Fn::GetAtt": "CustomPresetsArtifacts.dash"
			}
		},
		"HLSPresets": {
			"Value": {
				"Fn::GetAtt": "CustomPresetsArtifacts.hls"
			}
		},
		"DASHEndpoint": {
			"Value": {
				"Fn::Sub": "https://${SimpleVODDistribution.DomainName}/${OutputPrefix}dash/"
			}
		},
		"BucketName": {
			"Value": {
				"Ref": "SourceBucket"
			}
		},
		"TranscodingFunctionVersion": {
			"Value": {
				"Ref": "TranscodingFunctionVersion"
			}
		},
		"HLSEndpoint": {
			"Value": {
				"Fn::Sub": "https://${SimpleVODDistribution.DomainName}/${OutputPrefix}hls/"
			}
		}
	},
	"Conditions": {
		"BOTHPackageTypeCondition": {
			"Fn::Equals": [{
				"Ref": "PackageType"
			}, "BOTH"]
		},
		"HLSPackageTypeCondition": {
			"Fn::And": [{
				"Fn::Equals": [{
					"Ref": "PackageType"
				}, "HLS"]
			}, {
				"Fn::Not": [{
					"Fn::Equals": [{
						"Ref": "PackageType"
					}, "BOTH"]
				}]
			}]
		},
		"DASHPackageTypeCondition": {
			"Fn::And": [{
				"Fn::Equals": [{
					"Ref": "PackageType"
				}, "DASH"]
			}, {
				"Fn::Not": [{
					"Fn::Equals": [{
						"Ref": "PackageType"
					}, "BOTH"]
				}]
			}]
		}
	},
	"Resources": {
		"SourceBucketPolicy": {
			"Type": "AWS::S3::BucketPolicy",
			"Properties": {
				"PolicyDocument": {
					"Statement": [{
						"Action": ["s3:GetObject"],
						"Sid": "PolicyForCloudFrontPrivateContent",
						"Resource": {
							"Fn::Sub": "arn:aws:s3:::${SourceBucket}/*"
						},
						"Effect": "Allow",
						"Principal": {
							"CanonicalUser": {
								"Fn::GetAtt": "OriginAccessIdentity.S3CanonicalUserId"
							}
						}
					}]
				},
				"Bucket": {
					"Ref": "SourceBucket"
				}
			}
		},
		"TranscodingFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"S3Bucket": {
						"Fn::Join": ["-", [{
							"Fn::FindInMap": ["RepoBucket", "name", "prefix"]
						}, {
							"Ref": "AWS::Region"
						}]]
					},
					"S3Key": {
						"Fn::FindInMap": ["Lambda", "code", "transcoding"]
					}
				},
				"Tags": [{
					"Value": "SAM",
					"Key": "lambda:createdBy"
				}],
				"MemorySize": 128,
				"Environment": {
					"Variables": {
						"PACKAGE_TYPE": {
							"Fn::If": ["HLSPackageTypeCondition", {
								"Fn::GetAtt": "CustomPresetsArtifacts.hls"
							}, {
								"Fn::If": ["DASHPackageTypeCondition", {
									"Fn::GetAtt": "CustomPresetsArtifacts.dash"
								}, {
									"Fn::If": ["BOTHPackageTypeCondition", {
										"Fn::Join": ["|", [{
											"Fn::GetAtt": "CustomPresetsArtifacts.hls"
										}, {
											"Fn::GetAtt": "CustomPresetsArtifacts.dash"
										}]]
									}, {
										"Fn::GetAtt": "CustomPresetsArtifacts.hls"
									}]
								}]
							}]
						},
						"INPUT_PREFIX": {
							"Ref": "InputPrefix"
						},
						"JOB_ROLE": {
							"Fn::GetAtt": "MediaConvertJobRole.Arn"
						},
						"OUTPUT_PREFIX": {
							"Ref": "OutputPrefix"
						}
					}
				},
				"Handler": "index.handler",
				"Role": {
					"Fn::GetAtt": "TranscodingFunctionRole.Arn"
				},
				"Timeout": 290,
				"Runtime": "nodejs8.10"
			}
		},
		"TranscodingFunctionPerm": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"Action": "lambda:InvokeFunction",
				"Principal": "s3.amazonaws.com",
				"FunctionName": {
					"Ref": "TranscodingFunctionVersion"
				},
				"SourceArn": {
					"Fn::Sub": "arn:aws:s3:::${BucketName}-${AWS::AccountId}-${AWS::Region}"
				}
			}
		},
		"SourceBucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketEncryption": {
					"ServerSideEncryptionConfiguration": [{
						"ServerSideEncryptionByDefault": {
							"SSEAlgorithm": "AES256"
						}
					}]
				},
				"NotificationConfiguration": {
					"LambdaConfigurations": [{
						"Function": {
							"Ref": "TranscodingFunctionVersion"
						},
						"Filter": {
							"S3Key": {
								"Rules": [{
									"Name": "prefix",
									"Value": {
										"Fn::Sub": "${InputPrefix}"
									}
								}]
							}
						},
						"Event": "s3:ObjectCreated:*"
					}]
				},
				"BucketName": {
					"Fn::Sub": "${BucketName}-${AWS::AccountId}-${AWS::Region}"
				},
				"CorsConfiguration": {
					"CorsRules": [{
						"AllowedHeaders": ["*"],
						"ExposedHeaders": ["ETAG"],
						"AllowedMethods": ["GET"],
						"MaxAge": 3000,
						"AllowedOrigins": ["*"]
					}]
				}
			},
			"DependsOn": "TranscodingFunctionPerm"
		},
		"SimpleVODEventRule": {
			"Type": "AWS::Events::Rule",
			"Properties": {
				"EventPattern": {
					"source": ["aws.mediaconvert"],
					"detail": {
						"status": ["ERROR", "COMPLETE"]
					}
				},
				"Description": {
					"Fn::Sub": "${AWS::StackName} - Job Event Rule to send email"
				},
				"State": "ENABLED",
				"Targets": [{
					"Id": "JobTopic",
					"Arn": {
						"Ref": "SimpleVODTopic"
					},
					"InputTransformer": {
						"InputTemplate": "\"Job <jobId> finished with status <status>. Job details: https://<region>.console.aws.amazon.com/mediaconvert/home?region=<region>#/jobs/summary/<jobId>\"",
						"InputPathsMap": {
							"status": "$.detail.status",
							"region": "$.region",
							"jobId": "$.detail.jobId"
						}
					}
				}]
			}
		},
		"MediaConvertJobRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"Path": "/",
				"Policies": [{
					"PolicyName": "CustomPolicy",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Action": ["s3:*", "sns:*", "logs:*", "cloudwatch:*", "autoscaling:Describe*"],
							"Resource": "*",
							"Effect": "Allow"
						}]
					}
				}],
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": {
						"Action": ["sts:AssumeRole"],
						"Effect": "Allow",
						"Principal": {
							"Service": ["mediaconvert.amazonaws.com", "mediaconvert.us-east-2.amazonaws.com", "mediaconvert.us-east-1.amazonaws.com", "mediaconvert.us-west-1.amazonaws.com", "mediaconvert.us-west-2.amazonaws.com", "mediaconvert.ap-northeast-1.amazonaws.com", "mediaconvert.ap-northeast-2.amazonaws.com", "mediaconvert.ap-south-1.amazonaws.com", "mediaconvert.ap-southeast-1.amazonaws.com", "mediaconvert.ap-southeast-2.amazonaws.com", "mediaconvert.ca-central-1.amazonaws.com", "mediaconvert.eu-central-1.amazonaws.com", "mediaconvert.eu-west-1.amazonaws.com", "mediaconvert.eu-west-2.amazonaws.com", "mediaconvert.sa-east-1.amazonaws.com"]
						}
					}
				}
			}
		},
		"CustomPresetsArtifacts": {
			"Type": "Custom::Presets",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": ["CustomPresetsFunction", "Arn"]
				},
				"PresetsPrefix": "Custom-"
			}
		},
		"MySNSPolicy": {
			"Type": "AWS::SNS::TopicPolicy",
			"Properties": {
				"Topics": [{
					"Ref": "SimpleVODTopic"
				}],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Id": {
						"Fn::Sub": "${AWS::StackName}-MySNSPolicy"
					},
					"Statement": {
						"Action": "sns:Publish",
						"Resource": {
							"Ref": "SimpleVODTopic"
						},
						"Effect": "Allow",
						"Principal": {
							"Service": "events.amazonaws.com"
						}
					}
				}
			}
		},
		"SimpleVODSubscription": {
			"Type": "AWS::SNS::Subscription",
			"Properties": {
				"Endpoint": {
					"Ref": "EmailAddress"
				},
				"Protocol": "email",
				"TopicArn": {
					"Ref": "SimpleVODTopic"
				}
			}
		},
		"CustomPresetsFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"S3Bucket": {
						"Fn::Join": ["-", [{
							"Fn::FindInMap": ["RepoBucket", "name", "prefix"]
						}, {
							"Ref": "AWS::Region"
						}]]
					},
					"S3Key": {
						"Fn::FindInMap": ["Lambda", "code", "custompresets"]
					}
				},
				"Tags": [{
					"Value": "SAM",
					"Key": "lambda:createdBy"
				}],
				"MemorySize": 128,
				"Handler": "index.handler",
				"Role": {
					"Fn::GetAtt": "TranscodingFunctionRole.Arn"
				},
				"Timeout": 300,
				"Runtime": "nodejs8.10"
			}
		},
		"TranscodingFunctionVersion": {
			"Type": "AWS::Lambda::Version",
			"Properties": {
				"FunctionName": {
					"Ref": "TranscodingFunction"
				},
				"Description": "A version of TranscodingFunction"
			}
		},
		"SimpleVODTopic": {
			"Type": "AWS::SNS::Topic"
		},
		"SimpleVODDistribution": {
			"Type": "AWS::CloudFront::Distribution",
			"Properties": {
				"DistributionConfig": {
					"Comment": {
						"Fn::Sub": "${AWS::StackName} - distribution for vod content delivery"
					},
					"Origins": [{
						"S3OriginConfig": {
							"OriginAccessIdentity": {
								"Fn::Sub": "origin-access-identity/cloudfront/${OriginAccessIdentity}"
							}
						},
						"Id": "myS3Origin",
						"DomainName": {
							"Fn::Sub": "${SourceBucket}.s3.amazonaws.com"
						}
					}],
					"DefaultRootObject": "index.html",
					"PriceClass": "PriceClass_All",
					"Enabled": "true",
					"DefaultCacheBehavior": {
						"SmoothStreaming": "false",
						"TargetOriginId": "myS3Origin",
						"Compress": "true",
						"ViewerProtocolPolicy": "allow-all",
						"ForwardedValues": {
							"Cookies": {
								"Forward": "none"
							},
							"QueryString": "false"
						},
						"MinTTL": "86400"
					},
					"ViewerCertificate": {
						"CloudFrontDefaultCertificate": "true"
					}
				}
			}
		},
		"OriginAccessIdentity": {
			"Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
			"Properties": {
				"CloudFrontOriginAccessIdentityConfig": {
					"Comment": {
						"Fn::Sub": "${AWS::StackName} - Access private S3 bucket content only through CloudFront"
					}
				}
			},
			"Metadata": {
				"Comment": {
					"Fn::Sub": "${AWS::StackName} - Access private S3 bucket content only through CloudFront"
				}
			}
		},
		"TranscodingFunctionRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"Path": "/service-role/",
				"ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole", "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"],
				"Policies": [{
					"PolicyName": "CustomPolicy",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Action": ["s3:*"],
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${BucketName}-${AWS::AccountId}-${AWS::Region}"
							},
							"Effect": "Allow"
						}, {
							"Action": ["s3:*"],
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${BucketName}-${AWS::AccountId}-${AWS::Region}/*"
							},
							"Effect": "Allow"
						}, {
							"Action": ["mediaconvert:*"],
							"Resource": "*",
							"Effect": "Allow"
						}, {
							"Action": ["iam:PassRole"],
							"Resource": {
								"Fn::GetAtt": "MediaConvertJobRole.Arn"
							},
							"Effect": "Allow"
						}]
					}
				}],
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": {
						"Action": ["sts:AssumeRole"],
						"Effect": "Allow",
						"Principal": {
							"Service": ["lambda.amazonaws.com", "s3.amazonaws.com"]
						}
					}
				}
			}
		}
	},
	"Mappings": {
		"RepoBucket": {
			"name": {
				"prefix": "cf-as-default1"
			}
		},
		"Lambda": {
			"code": {
				"custompresets": "ott-vod/lambda/latest/custom-presets-function.zip",
				"transcoding": "ott-vod/lambda/latest/transcoding-function.zip"
			}
		}
	}
}