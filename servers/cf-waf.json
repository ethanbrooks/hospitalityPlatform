{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "(SO0006) - AWS WAF Security Automations v2.3.0: This AWS CloudFormation template helps you provision the AWS WAF Security Automations stack without worrying about creating and configuring the underlying AWS infrastructure.\n**WARNING** This template creates an AWS Lambda function, an AWS WAF Web ACL, an Amazon S3 bucket, and an Amazon CloudWatch custom metric. You will be billed for the AWS resources used if you create a stack from this template.\n**NOTICE** Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved. Licensed under the Amazon Software License (the License). You may not use this file except in compliance with the License. A copy of the License is located at http://aws.amazon.com/asl/ or in the license file accompanying this file. This file is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and limitations under the License.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Protection List"
                    },
                    "Parameters": [
                        "ActivateSqlInjectionProtectionParam",
                        "ActivateCrossSiteScriptingProtectionParam",
                        "ActivateHttpFloodProtectionParam",
                        "ActivateScannersProbesProtectionParam",
                        "ActivateReputationListsProtectionParam",
                        "ActivateBadBotProtectionParam"
                    ]
                },
                {
                    "Label": {
                        "default": "Settings"
                    },
                    "Parameters": [
                        "EndpointType",
                        "AppAccessLogBucket"
                    ]
                },
                {
                    "Label": {
                        "default": "Advanced Settings"
                    },
                    "Parameters": [
                        "RequestThreshold",
                        "ErrorThreshold",
                        "WAFBlockPeriod"
                    ]
                }
            ],
            "ParameterLabels": {
                "ActivateSqlInjectionProtectionParam": {
                    "default": "Activate SQL Injection Protection"
                },
                "ActivateCrossSiteScriptingProtectionParam": {
                    "default": "Activate Cross-site Scripting Protection"
                },
                "ActivateHttpFloodProtectionParam": {
                    "default": "Activate HTTP Flood Protection"
                },
                "ActivateScannersProbesProtectionParam": {
                    "default": "Activate Scanner & Probe Protection"
                },
                "ActivateReputationListsProtectionParam": {
                    "default": "Activate Reputation List Protection"
                },
                "ActivateBadBotProtectionParam": {
                    "default": "Activate Bad Bot Protection"
                },
                "EndpointType": {
                    "default": "Endpoint Type"
                },
                "AppAccessLogBucket": {
                    "default": "Application Access Log Bucket Name"
                },
                "RequestThreshold": {
                    "default": "Request Threshold"
                },
                "ErrorThreshold": {
                    "default": "Error Threshold"
                },
                "WAFBlockPeriod": {
                    "default": "WAF Block Period"
                }
            }
        }
    },
    "Parameters": {
        "ActivateSqlInjectionProtectionParam": {
            "Type": "String",
            "Default": "yes",
            "AllowedValues": [
                "yes",
                "no"
            ],
            "Description": "Choose yes to enable the component designed to block common SQL injection attacks."
        },
        "ActivateCrossSiteScriptingProtectionParam": {
            "Type": "String",
            "Default": "yes",
            "AllowedValues": [
                "yes",
                "no"
            ],
            "Description": "Choose yes to enable the component designed to block common XSS attacks."
        },
        "ActivateHttpFloodProtectionParam": {
            "Type": "String",
            "Default": "yes - AWS WAF rate based rule",
            "AllowedValues": [
                "yes - AWS WAF rate based rule",
                "yes - AWS Lambda log parser",
                "yes - Amazon Athena log parser",
                "no"
            ],
            "Description": "Choose yes to enable the component designed to block HTTP flood attacks."
        },
        "ActivateScannersProbesProtectionParam": {
            "Type": "String",
            "Default": "yes - AWS Lambda log parser",
            "AllowedValues": [
                "yes - AWS Lambda log parser",
                "yes - Amazon Athena log parser",
                "no"
            ],
            "Description": "Choose yes to enable the component designed to block scanners and probes."
        },
        "ActivateReputationListsProtectionParam": {
            "Type": "String",
            "Default": "yes",
            "AllowedValues": [
                "yes",
                "no"
            ],
            "Description": "Choose yes to block requests from IP addresses on third-party reputation lists (supported lists: spamhaus, torproject, and emergingthreats)."
        },
        "ActivateBadBotProtectionParam": {
            "Type": "String",
            "Default": "yes",
            "AllowedValues": [
                "yes",
                "no"
            ],
            "Description": "Choose yes to enable the component designed to block bad bots and content scrapers."
        },
        "EndpointType": {
            "Type": "String",
            "Default": "CloudFront",
            "AllowedValues": [
                "CloudFront",
                "ALB"
            ],
            "Description": "Select the type of resource being used."
        },
        "AppAccessLogBucket": {
            "Type": "String",
            "Default": "",
            "AllowedPattern": "(^$|^([a-z]|(\\d(?!\\d{0,2}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})))([a-z\\d]|(\\.(?!(\\.|-)))|(-(?!\\.))){1,61}[a-z\\d]$)",
            "Description": "If you chose yes for the Activate Scanners & Probes Protection parameter, enter a name for the  Amazon S3 bucket where you want to store access logs for your CloudFront distribution or Application  Load Balancer. More about bucket name restriction here: http://amzn.to/1p1YlU5.  If you chose to deactivate this protection, ignore this parameter. "
        },
        "RequestThreshold": {
            "Type": "Number",
            "Default": 2000,
            "MinValue": 0,
            "Description": "If you chose yes for the Activate HTTP Flood Protection parameter, enter the maximum acceptable requests per FIVE-minute period per IP address. Please note that AWS WAF rate based rule requires values greather than 2,000 (if you chose Lambda/Athena log parser options, you can use any value greather than zero). If you chose to deactivate this protection, ignore this parameter."
        },
        "ErrorThreshold": {
            "Type": "Number",
            "Default": 50,
            "MinValue": 0,
            "Description": "If you chose yes for the Activate Scanners & Probes Protection parameter, enter the maximum acceptable bad requests per minute per IP. If you chose to deactivate this protection protection, ignore this parameter."
        },
        "WAFBlockPeriod": {
            "Type": "Number",
            "Default": 240,
            "MinValue": 0,
            "Description": "If you chose yes for the Activate Scanners & Probes Protection or HTTP Flood Lambda/Athena log parser parameters, enter the period (in minutes) to block applicable IP addresses. If you chose to deactivate log parsing, ignore this parameter."
        }
    },
    "Conditions": {
        "SqlInjectionProtectionActivated": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateSqlInjectionProtectionParam"
                },
                "yes"
            ]
        },
        "CrossSiteScriptingProtectionActivated": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateCrossSiteScriptingProtectionParam"
                },
                "yes"
            ]
        },
        "HttpFloodProtectionRateBasedRuleActivated": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateHttpFloodProtectionParam"
                },
                "yes - AWS WAF rate based rule"
            ]
        },
        "HttpFloodLambdaLogParser": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateHttpFloodProtectionParam"
                },
                "yes - AWS Lambda log parser"
            ]
        },
        "HttpFloodAthenaLogParser": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateHttpFloodProtectionParam"
                },
                "yes - Amazon Athena log parser"
            ]
        },
        "HttpFloodProtectionLogParserActivated": {
            "Fn::Or": [
                {
                    "Condition": "HttpFloodLambdaLogParser"
                },
                {
                    "Condition": "HttpFloodAthenaLogParser"
                }
            ]
        },
        "ScannersProbesLambdaLogParser": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateScannersProbesProtectionParam"
                },
                "yes - AWS Lambda log parser"
            ]
        },
        "ScannersProbesAthenaLogParser": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateScannersProbesProtectionParam"
                },
                "yes - Amazon Athena log parser"
            ]
        },
        "ScannersProbesProtectionActivated": {
            "Fn::Or": [
                {
                    "Condition": "ScannersProbesLambdaLogParser"
                },
                {
                    "Condition": "ScannersProbesAthenaLogParser"
                }
            ]
        },
        "AthenaLogParser": {
            "Fn::Or": [
                {
                    "Condition": "HttpFloodAthenaLogParser"
                },
                {
                    "Condition": "ScannersProbesAthenaLogParser"
                }
            ]
        },
        "LogParser": {
            "Fn::Or": [
                {
                    "Condition": "HttpFloodProtectionLogParserActivated"
                },
                {
                    "Condition": "ScannersProbesProtectionActivated"
                }
            ]
        },
        "CreateFirehoseAthenaStack": {
            "Fn::Or": [
                {
                    "Condition": "HttpFloodProtectionLogParserActivated"
                },
                {
                    "Condition": "AthenaLogParser"
                }
            ]
        },
        "ReputationListsProtectionActivated": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateReputationListsProtectionParam"
                },
                "yes"
            ]
        },
        "BadBotProtectionActivated": {
            "Fn::Equals": [
                {
                    "Ref": "ActivateBadBotProtectionParam"
                },
                "yes"
            ]
        },
        "AlbEndpoint": {
            "Fn::Equals": [
                {
                    "Ref": "EndpointType"
                },
                "ALB"
            ]
        },
        "CloudFrontEndpoint": {
            "Fn::Equals": [
                {
                    "Ref": "EndpointType"
                },
                "CloudFront"
            ]
        }
    },
    "Mappings": {
        "SourceCode": {
            "General": {
                "S3Bucket": "solutions",
                "KeyPrefix": "aws-waf-security-automations/v2.3.0"
            }
        },
        "Solution": {
            "Data": {
                "SendAnonymousUsageData": "Yes",
                "LogLevel": "INFO"
            },
            "Action": {
                "WAFWhitelistRule": "ALLOW",
                "WAFBlacklistRule": "BLOCK",
                "WAFSqlInjectionRule": "BLOCK",
                "WAFXssRule": "BLOCK",
                "WAFHttpFloodRateBasedRule": "BLOCK",
                "WAFHttpFloodRegularRule": "BLOCK",
                "WAFScannersProbesRule": "BLOCK",
                "WAFIPReputationListsRule": "BLOCK",
                "WAFBadBotRule": "BLOCK"
            }
        }
    },
    "Resources": {
        "LambdaRoleHelper": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "S3Access",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetBucketLocation",
                                        "s3:GetObject",
                                        "s3:ListBucket"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${AppAccessLogBucket}"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "LogsAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LambdaWAFHelperFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "This lambda function verifies the main project's dependencies, requirements and implement auxiliary functions.",
                "Handler": "helper.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRoleHelper",
                        "Arn"
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "S3Bucket"
                                    ]
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "KeyPrefix"
                                    ]
                                },
                                "helper.zip"
                            ]
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "API_TYPE": {
                            "Fn::If": [
                                "AlbEndpoint",
                                "waf-regional",
                                "waf"
                            ]
                        },
                        "LOG_LEVEL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "LogLevel"
                            ]
                        }
                    }
                },
                "Runtime": "python3.7",
                "MemorySize": 128,
                "Timeout": 300
            }
        },
        "CheckRequirements": {
            "Type": "Custom::CheckRequirements",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaWAFHelperFunction",
                        "Arn"
                    ]
                },
                "AthenaLogParser": {
                    "Fn::If": [
                        "AthenaLogParser",
                        "yes",
                        "no"
                    ]
                },
                "HttpFloodProtectionRateBasedRuleActivated": {
                    "Fn::If": [
                        "HttpFloodProtectionRateBasedRuleActivated",
                        "yes",
                        "no"
                    ]
                },
                "HttpFloodProtectionLogParserActivated": {
                    "Fn::If": [
                        "HttpFloodProtectionLogParserActivated",
                        "yes",
                        "no"
                    ]
                },
                "ProtectionActivatedScannersProbes": {
                    "Fn::If": [
                        "ScannersProbesProtectionActivated",
                        "yes",
                        "no"
                    ]
                },
                "AppAccessLogBucket": {
                    "Ref": "AppAccessLogBucket"
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "EndpointType": {
                    "Ref": "EndpointType"
                },
                "RequestThreshold": {
                    "Ref": "RequestThreshold"
                }
            }
        },
        "CreateUniqueID": {
            "Type": "Custom::CreateUUID",
            "DependsOn": "CheckRequirements",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaWAFHelperFunction",
                        "Arn"
                    ]
                }
            }
        },
        "CreateDeliveryStreamName": {
            "Type": "Custom::CreateDeliveryStreamName",
            "Condition": "HttpFloodProtectionLogParserActivated",
            "DependsOn": "CheckRequirements",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaWAFHelperFunction",
                        "Arn"
                    ]
                },
                "StackName": {
                    "Ref": "AWS::StackName"
                }
            }
        },
        "CreateGlueDatabaseName": {
            "Type": "Custom::CreateGlueDatabaseName",
            "Condition": "AthenaLogParser",
            "DependsOn": "CheckRequirements",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaWAFHelperFunction",
                        "Arn"
                    ]
                },
                "StackName": {
                    "Ref": "AWS::StackName"
                }
            }
        },
        "WafLogBucket": {
            "Type": "AWS::S3::Bucket",
            "Condition": "HttpFloodProtectionLogParserActivated",
            "DependsOn": "CheckRequirements",
            "DeletionPolicy": "Retain",
            "Properties": {
                "AccessControl": "Private",
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            }
        },
        "FirehoseAthenaStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Condition": "CreateFirehoseAthenaStack",
            "DependsOn": "CheckRequirements",
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://s3.amazonaws.com/${S3Bucket}-${AWS::Region}/${KeyPrefix}/aws-waf-security-automations-firehose-athena.template",
                        {
                            "S3Bucket": {
                                "Fn::FindInMap": [
                                    "SourceCode",
                                    "General",
                                    "S3Bucket"
                                ]
                            },
                            "KeyPrefix": {
                                "Fn::FindInMap": [
                                    "SourceCode",
                                    "General",
                                    "KeyPrefix"
                                ]
                            }
                        }
                    ]
                },
                "Parameters": {
                    "ActivateHttpFloodProtectionParam": {
                        "Ref": "ActivateHttpFloodProtectionParam"
                    },
                    "ActivateScannersProbesProtectionParam": {
                        "Ref": "ActivateScannersProbesProtectionParam"
                    },
                    "EndpointType": {
                        "Ref": "EndpointType"
                    },
                    "AppAccessLogBucket": {
                        "Ref": "AppAccessLogBucket"
                    },
                    "ParentStackName": {
                        "Ref": "AWS::StackName"
                    },
                    "WafLogBucket": {
                        "Fn::If": [
                            "HttpFloodProtectionLogParserActivated",
                            {
                                "Ref": "WafLogBucket"
                            },
                            ""
                        ]
                    },
                    "WafLogBucketArn": {
                        "Fn::If": [
                            "HttpFloodProtectionLogParserActivated",
                            {
                                "Fn::GetAtt": [
                                    "WafLogBucket",
                                    "Arn"
                                ]
                            },
                            ""
                        ]
                    },
                    "RequestThreshold": {
                        "Ref": "RequestThreshold"
                    },
                    "ErrorThreshold": {
                        "Ref": "ErrorThreshold"
                    },
                    "WAFBlockPeriod": {
                        "Ref": "WAFBlockPeriod"
                    },
                    "GlueDatabaseName": {
                        "Fn::If": [
                            "AthenaLogParser",
                            {
                                "Fn::GetAtt": [
                                    "CreateGlueDatabaseName",
                                    "DatabaseName"
                                ]
                            },
                            ""
                        ]
                    },
                    "DeliveryStreamName": {
                        "Fn::If": [
                            "HttpFloodProtectionLogParserActivated",
                            {
                                "Fn::GetAtt": [
                                    "CreateDeliveryStreamName",
                                    "DeliveryStreamName"
                                ]
                            },
                            ""
                        ]
                    }
                }
            }
        },
        "AlbStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Condition": "AlbEndpoint",
            "DependsOn": "CheckRequirements",
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://s3.amazonaws.com/${S3Bucket}-${AWS::Region}/${KeyPrefix}/aws-waf-security-automations-alb.template",
                        {
                            "S3Bucket": {
                                "Fn::FindInMap": [
                                    "SourceCode",
                                    "General",
                                    "S3Bucket"
                                ]
                            },
                            "KeyPrefix": {
                                "Fn::FindInMap": [
                                    "SourceCode",
                                    "General",
                                    "KeyPrefix"
                                ]
                            }
                        }
                    ]
                },
                "Parameters": {
                    "ActivateSqlInjectionProtectionParam": {
                        "Ref": "ActivateSqlInjectionProtectionParam"
                    },
                    "ActivateCrossSiteScriptingProtectionParam": {
                        "Ref": "ActivateCrossSiteScriptingProtectionParam"
                    },
                    "ActivateHttpFloodProtectionParam": {
                        "Ref": "ActivateHttpFloodProtectionParam"
                    },
                    "ActivateScannersProbesProtectionParam": {
                        "Ref": "ActivateScannersProbesProtectionParam"
                    },
                    "ActivateReputationListsProtectionParam": {
                        "Ref": "ActivateReputationListsProtectionParam"
                    },
                    "ActivateBadBotProtectionParam": {
                        "Ref": "ActivateBadBotProtectionParam"
                    },
                    "AppAccessLogBucket": {
                        "Ref": "AppAccessLogBucket"
                    },
                    "WafApiType": "waf-regional",
                    "WafArnPrefix": {
                        "Fn::Sub": "arn:aws:waf-regional:${AWS::Region}:"
                    },
                    "ParentStackName": {
                        "Ref": "AWS::StackName"
                    },
                    "WafLogBucket": {
                        "Fn::If": [
                            "HttpFloodProtectionLogParserActivated",
                            {
                                "Ref": "WafLogBucket"
                            },
                            ""
                        ]
                    },
                    "GlueAccessLogsDatabase": {
                        "Fn::If": [
                            "AthenaLogParser",
                            {
                                "Fn::GetAtt": [
                                    "FirehoseAthenaStack",
                                    "Outputs",
                                    "GlueAccessLogsDatabase"
                                ]
                            },
                            ""
                        ]
                    },
                    "GlueAppAccessLogsTable": {
                        "Fn::If": [
                            "ScannersProbesAthenaLogParser",
                            {
                                "Fn::GetAtt": [
                                    "FirehoseAthenaStack",
                                    "Outputs",
                                    "ALBGlueAppAccessLogsTable"
                                ]
                            },
                            ""
                        ]
                    },
                    "GlueWafAccessLogsTable": {
                        "Fn::If": [
                            "HttpFloodAthenaLogParser",
                            {
                                "Fn::GetAtt": [
                                    "FirehoseAthenaStack",
                                    "Outputs",
                                    "GlueWafAccessLogsTable"
                                ]
                            },
                            ""
                        ]
                    }
                }
            }
        },
        "CloudFrontStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Condition": "CloudFrontEndpoint",
            "DependsOn": "CheckRequirements",
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://s3.amazonaws.com/${S3Bucket}-${AWS::Region}/${KeyPrefix}/aws-waf-security-automations-cloudfront.template",
                        {
                            "S3Bucket": {
                                "Fn::FindInMap": [
                                    "SourceCode",
                                    "General",
                                    "S3Bucket"
                                ]
                            },
                            "KeyPrefix": {
                                "Fn::FindInMap": [
                                    "SourceCode",
                                    "General",
                                    "KeyPrefix"
                                ]
                            }
                        }
                    ]
                },
                "Parameters": {
                    "ActivateSqlInjectionProtectionParam": {
                        "Ref": "ActivateSqlInjectionProtectionParam"
                    },
                    "ActivateCrossSiteScriptingProtectionParam": {
                        "Ref": "ActivateCrossSiteScriptingProtectionParam"
                    },
                    "ActivateHttpFloodProtectionParam": {
                        "Ref": "ActivateHttpFloodProtectionParam"
                    },
                    "ActivateScannersProbesProtectionParam": {
                        "Ref": "ActivateScannersProbesProtectionParam"
                    },
                    "ActivateReputationListsProtectionParam": {
                        "Ref": "ActivateReputationListsProtectionParam"
                    },
                    "ActivateBadBotProtectionParam": {
                        "Ref": "ActivateBadBotProtectionParam"
                    },
                    "AppAccessLogBucket": {
                        "Ref": "AppAccessLogBucket"
                    },
                    "WafApiType": "waf",
                    "WafArnPrefix": "arn:aws:waf::",
                    "ParentStackName": {
                        "Ref": "AWS::StackName"
                    },
                    "WafLogBucket": {
                        "Fn::If": [
                            "HttpFloodProtectionLogParserActivated",
                            {
                                "Ref": "WafLogBucket"
                            },
                            ""
                        ]
                    },
                    "GlueAccessLogsDatabase": {
                        "Fn::If": [
                            "AthenaLogParser",
                            {
                                "Fn::GetAtt": [
                                    "FirehoseAthenaStack",
                                    "Outputs",
                                    "GlueAccessLogsDatabase"
                                ]
                            },
                            ""
                        ]
                    },
                    "GlueAppAccessLogsTable": {
                        "Fn::If": [
                            "ScannersProbesAthenaLogParser",
                            {
                                "Fn::GetAtt": [
                                    "FirehoseAthenaStack",
                                    "Outputs",
                                    "CloudFrontGlueAppAccessLogsTable"
                                ]
                            },
                            ""
                        ]
                    },
                    "GlueWafAccessLogsTable": {
                        "Fn::If": [
                            "HttpFloodAthenaLogParser",
                            {
                                "Fn::GetAtt": [
                                    "FirehoseAthenaStack",
                                    "Outputs",
                                    "GlueWafAccessLogsTable"
                                ]
                            },
                            ""
                        ]
                    }
                }
            }
        },
        "LambdaLogParserFunction": {
            "Type": "AWS::Lambda::Function",
            "Condition": "LogParser",
            "Properties": {
                "Description": {
                    "Fn::Sub": "This function parses access logs to identify suspicious behavior, such as an abnormal amount of errors. It then blocks those IP addresses for a customer-defined period of time. Parameters: ${RequestThreshold}, ${ErrorThreshold} and ${WAFBlockPeriod}.\n"
                },
                "Handler": "log-parser.lambda_handler",
                "Role": {
                    "Fn::If": [
                        "AlbEndpoint",
                        {
                            "Fn::GetAtt": [
                                "AlbStack",
                                "Outputs",
                                "LambdaRoleLogParserArn"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "CloudFrontStack",
                                "Outputs",
                                "LambdaRoleLogParserArn"
                            ]
                        }
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "S3Bucket"
                                    ]
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "KeyPrefix"
                                    ]
                                },
                                "log-parser.zip"
                            ]
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "APP_ACCESS_LOG_BUCKET": {
                            "Fn::If": [
                                "ScannersProbesProtectionActivated",
                                {
                                    "Ref": "AppAccessLogBucket"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "WAF_ACCESS_LOG_BUCKET": {
                            "Fn::If": [
                                "HttpFloodProtectionLogParserActivated",
                                {
                                    "Ref": "WafLogBucket"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "SEND_ANONYMOUS_USAGE_DATA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "SendAnonymousUsageData"
                            ]
                        },
                        "UUID": {
                            "Fn::GetAtt": [
                                "CreateUniqueID",
                                "UUID"
                            ]
                        },
                        "LIMIT_IP_ADDRESS_RANGES_PER_IP_MATCH_CONDITION": "10000",
                        "MAX_AGE_TO_UPDATE": "30",
                        "REGION": {
                            "Ref": "AWS::Region"
                        },
                        "LOG_TYPE": {
                            "Fn::If": [
                                "AlbEndpoint",
                                "alb",
                                "cloudfront"
                            ]
                        },
                        "METRIC_NAME_PREFIX": {
                            "Fn::Join": [
                                "",
                                {
                                    "Fn::Split": [
                                        "-",
                                        {
                                            "Ref": "AWS::StackName"
                                        }
                                    ]
                                }
                            ]
                        },
                        "LOG_LEVEL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "LogLevel"
                            ]
                        },
                        "STACK_NAME": {
                            "Ref": "AWS::StackName"
                        },
                        "IP_SET_ID_HTTP_FLOOD": {
                            "Fn::If": [
                                "HttpFloodProtectionLogParserActivated",
                                {
                                    "Fn::If": [
                                        "AlbEndpoint",
                                        {
                                            "Fn::GetAtt": [
                                                "AlbStack",
                                                "Outputs",
                                                "WAFHttpFloodSet"
                                            ]
                                        },
                                        {
                                            "Fn::GetAtt": [
                                                "CloudFrontStack",
                                                "Outputs",
                                                "WAFHttpFloodSet"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "IP_SET_ID_SCANNERS_PROBES": {
                            "Fn::If": [
                                "ScannersProbesProtectionActivated",
                                {
                                    "Fn::If": [
                                        "AlbEndpoint",
                                        {
                                            "Fn::GetAtt": [
                                                "AlbStack",
                                                "Outputs",
                                                "WAFScannersProbesSet"
                                            ]
                                        },
                                        {
                                            "Fn::GetAtt": [
                                                "CloudFrontStack",
                                                "Outputs",
                                                "WAFScannersProbesSet"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        }
                    }
                },
                "Runtime": "python3.7",
                "MemorySize": 512,
                "Timeout": 300
            }
        },
        "LambdaInvokePermissionAppLogParserS3": {
            "Type": "AWS::Lambda::Permission",
            "Condition": "LogParser",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaLogParserFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:*",
                "Principal": "s3.amazonaws.com",
                "SourceAccount": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "LambdaAthenaWAFLogParser": {
            "Type": "AWS::Events::Rule",
            "Condition": "HttpFloodAthenaLogParser",
            "Properties": {
                "Description": "Security Automations - WAF Logs Athena parser",
                "ScheduleExpression": "rate(5 minutes)",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "LambdaLogParserFunction",
                                "Arn"
                            ]
                        },
                        "Id": "LambdaLogParserFunction",
                        "Input": {
                            "Fn::Sub": "{\n  \"resourceType\": \"LambdaAthenaWAFLogParser\",\n  \"glueAccessLogsDatabase\": \"${FirehoseAthenaStack.Outputs.GlueAccessLogsDatabase}\",\n  \"accessLogBucket\": \"${WafLogBucket}\",\n  \"logParserQuery\": \"${FirehoseAthenaStack.Outputs.AthenaWafLogParserQuery}\"\n}\n"
                        }
                    }
                ]
            }
        },
        "LambdaInvokePermissionWafLogParserCloudWatch": {
            "Type": "AWS::Lambda::Permission",
            "Condition": "HttpFloodAthenaLogParser",
            "Properties": {
                "FunctionName": {
                    "Ref": "LambdaLogParserFunction"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "LambdaAthenaWAFLogParser",
                        "Arn"
                    ]
                }
            }
        },
        "LambdaAthenaAppLogParser": {
            "Type": "AWS::Events::Rule",
            "Condition": "ScannersProbesAthenaLogParser",
            "Properties": {
                "Description": "Security Automations - App Logs Athena parser",
                "ScheduleExpression": "rate(5 minutes)",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "LambdaLogParserFunction",
                                "Arn"
                            ]
                        },
                        "Id": "LambdaLogParserFunction",
                        "Input": {
                            "Fn::Sub": "{\n  \"resourceType\": \"LambdaAthenaAppLogParser\",\n  \"glueAccessLogsDatabase\": \"${FirehoseAthenaStack.Outputs.GlueAccessLogsDatabase}\",\n  \"accessLogBucket\": \"${AppAccessLogBucket}\",\n  \"logParserQuery\": \"${FirehoseAthenaStack.Outputs.AthenaAppLogParserQuery}\"\n}\n"
                        }
                    }
                ]
            }
        },
        "LambdaInvokePermissionAppLogParserCloudWatch": {
            "Type": "AWS::Lambda::Permission",
            "Condition": "ScannersProbesAthenaLogParser",
            "Properties": {
                "FunctionName": {
                    "Ref": "LambdaLogParserFunction"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "LambdaAthenaAppLogParser",
                        "Arn"
                    ]
                }
            }
        },
        "LambdaWAFReputationListsParserFunction": {
            "Type": "AWS::Lambda::Function",
            "Condition": "ReputationListsProtectionActivated",
            "Properties": {
                "Description": "This lambda function checks third-party IP reputation lists hourly for new IP ranges to block. These lists include the Spamhaus Dont Route Or Peer (DROP) and Extended Drop (EDROP) lists, the Proofpoint Emerging Threats IP list, and the Tor exit node list.",
                "Handler": "reputation-lists-parser.handler",
                "Role": {
                    "Fn::If": [
                        "AlbEndpoint",
                        {
                            "Fn::GetAtt": [
                                "AlbStack",
                                "Outputs",
                                "LambdaRoleReputationListsParserArn"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "CloudFrontStack",
                                "Outputs",
                                "LambdaRoleReputationListsParserArn"
                            ]
                        }
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "S3Bucket"
                                    ]
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "KeyPrefix"
                                    ]
                                },
                                "reputation-lists-parser.zip"
                            ]
                        ]
                    }
                },
                "Runtime": "nodejs8.10",
                "MemorySize": 256,
                "Timeout": 300,
                "Environment": {
                    "Variables": {
                        "SEND_ANONYMOUS_USAGE_DATA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "SendAnonymousUsageData"
                            ]
                        },
                        "UUID": {
                            "Fn::GetAtt": [
                                "CreateUniqueID",
                                "UUID"
                            ]
                        },
                        "METRIC_NAME_PREFIX": {
                            "Fn::Join": [
                                "",
                                {
                                    "Fn::Split": [
                                        "-",
                                        {
                                            "Ref": "AWS::StackName"
                                        }
                                    ]
                                }
                            ]
                        },
                        "LOG_LEVEL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "LogLevel"
                            ]
                        }
                    }
                }
            }
        },
        "LambdaWAFReputationListsParserEventsRule": {
            "Type": "AWS::Events::Rule",
            "Condition": "ReputationListsProtectionActivated",
            "Properties": {
                "Description": "Security Automations - WAF Reputation Lists",
                "ScheduleExpression": "rate(1 hour)",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "LambdaWAFReputationListsParserFunction",
                                "Arn"
                            ]
                        },
                        "Id": "LambdaWAFReputationListsParserFunction",
                        "Input": {
                            "Fn::Sub": [
                                "{\n  \"lists\": [\n    {\"url\":\"https://www.spamhaus.org/drop/drop.txt\"},\n    {\"url\":\"https://www.spamhaus.org/drop/edrop.txt\"},\n    {\"url\":\"https://check.torproject.org/exit-addresses\", \"prefix\":\"ExitAddress\"},\n    {\"url\":\"https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt\"}\n  ],\n  \"apiType\": \"${ApiType}\",\n  \"region\": \"${AWS::Region}\",\n  \"ipSetIds\": [\"${WAFReputationListsSet}\"]\n}",
                                {
                                    "ApiType": {
                                        "Fn::If": [
                                            "AlbEndpoint",
                                            "waf-regional",
                                            "waf"
                                        ]
                                    },
                                    "WAFReputationListsSet": {
                                        "Fn::If": [
                                            "AlbEndpoint",
                                            {
                                                "Fn::GetAtt": [
                                                    "AlbStack",
                                                    "Outputs",
                                                    "WAFReputationListsSet"
                                                ]
                                            },
                                            {
                                                "Fn::GetAtt": [
                                                    "CloudFrontStack",
                                                    "Outputs",
                                                    "WAFReputationListsSet"
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LambdaInvokePermissionReputationListsParser": {
            "Type": "AWS::Lambda::Permission",
            "Condition": "ReputationListsProtectionActivated",
            "Properties": {
                "FunctionName": {
                    "Ref": "LambdaWAFReputationListsParserFunction"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "LambdaWAFReputationListsParserEventsRule",
                        "Arn"
                    ]
                }
            }
        },
        "LambdaWAFBadBotParserFunction": {
            "Type": "AWS::Lambda::Function",
            "Condition": "BadBotProtectionActivated",
            "Properties": {
                "Description": "This lambda function will intercepts and inspects trap endpoint requests to extract its IP address, and then add it to an AWS WAF block list.",
                "Handler": "access-handler.lambda_handler",
                "Role": {
                    "Fn::If": [
                        "AlbEndpoint",
                        {
                            "Fn::GetAtt": [
                                "AlbStack",
                                "Outputs",
                                "LambdaRoleBadBotArn"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "CloudFrontStack",
                                "Outputs",
                                "LambdaRoleBadBotArn"
                            ]
                        }
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "S3Bucket"
                                    ]
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "KeyPrefix"
                                    ]
                                },
                                "access-handler.zip"
                            ]
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "IP_SET_ID_BAD_BOT": {
                            "Fn::If": [
                                "AlbEndpoint",
                                {
                                    "Fn::GetAtt": [
                                        "AlbStack",
                                        "Outputs",
                                        "WAFBadBotSet"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "CloudFrontStack",
                                        "Outputs",
                                        "WAFBadBotSet"
                                    ]
                                }
                            ]
                        },
                        "SEND_ANONYMOUS_USAGE_DATA": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "SendAnonymousUsageData"
                            ]
                        },
                        "UUID": {
                            "Fn::GetAtt": [
                                "CreateUniqueID",
                                "UUID"
                            ]
                        },
                        "REGION": {
                            "Ref": "AWS::Region"
                        },
                        "LOG_TYPE": {
                            "Fn::If": [
                                "AlbEndpoint",
                                "alb",
                                "cloudfront"
                            ]
                        },
                        "METRIC_NAME_PREFIX": {
                            "Fn::Join": [
                                "",
                                {
                                    "Fn::Split": [
                                        "-",
                                        {
                                            "Ref": "AWS::StackName"
                                        }
                                    ]
                                }
                            ]
                        },
                        "LOG_LEVEL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "LogLevel"
                            ]
                        }
                    }
                },
                "Runtime": "python3.7",
                "MemorySize": 128,
                "Timeout": 300
            }
        },
        "LambdaInvokePermissionBadBot": {
            "Type": "AWS::Lambda::Permission",
            "Condition": "BadBotProtectionActivated",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaWAFBadBotParserFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:*",
                "Principal": "apigateway.amazonaws.com"
            }
        },
        "ApiGatewayBadBot": {
            "Type": "AWS::ApiGateway::RestApi",
            "Condition": "BadBotProtectionActivated",
            "DependsOn": "CheckRequirements",
            "Properties": {
                "Name": "Security Automations - WAF Bad Bot API",
                "Description": "API created by AWS WAF Security Automations CloudFormation template. This endpoint will be used to capture bad bots."
            }
        },
        "ApiGatewayBadBotResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Condition": "BadBotProtectionActivated",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayBadBot"
                },
                "ParentId": {
                    "Fn::GetAtt": [
                        "ApiGatewayBadBot",
                        "RootResourceId"
                    ]
                },
                "PathPart": "{proxy+}"
            }
        },
        "ApiGatewayBadBotMethodRoot": {
            "Type": "AWS::ApiGateway::Method",
            "Condition": "BadBotProtectionActivated",
            "DependsOn": "LambdaInvokePermissionBadBot",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayBadBot"
                },
                "ResourceId": {
                    "Fn::GetAtt": [
                        "ApiGatewayBadBot",
                        "RootResourceId"
                    ]
                },
                "HttpMethod": "ANY",
                "AuthorizationType": "NONE",
                "RequestParameters": {
                    "method.request.header.X-Forwarded-For": false
                },
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaWAFBadBotParserFunction.Arn}/invocations"
                    }
                }
            }
        },
        "ApiGatewayBadBotMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Condition": "BadBotProtectionActivated",
            "DependsOn": "LambdaInvokePermissionBadBot",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayBadBot"
                },
                "ResourceId": {
                    "Ref": "ApiGatewayBadBotResource"
                },
                "HttpMethod": "ANY",
                "AuthorizationType": "NONE",
                "RequestParameters": {
                    "method.request.header.X-Forwarded-For": false
                },
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaWAFBadBotParserFunction.Arn}/invocations"
                    }
                }
            }
        },
        "ApiGatewayBadBotDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "Condition": "BadBotProtectionActivated",
            "DependsOn": "ApiGatewayBadBotMethod",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayBadBot"
                },
                "Description": "CloudFormation Deployment Stage",
                "StageName": "CFDeploymentStage"
            }
        },
        "ApiGatewayBadBotStage": {
            "Type": "AWS::ApiGateway::Stage",
            "Condition": "BadBotProtectionActivated",
            "Properties": {
                "DeploymentId": {
                    "Ref": "ApiGatewayBadBotDeployment"
                },
                "Description": "Production Stage",
                "RestApiId": {
                    "Ref": "ApiGatewayBadBot"
                },
                "StageName": "ProdStage"
            }
        },
        "LambdaWAFCustomResourceFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "This lambda function configures the Web ACL rules based on the features enabled in the CloudFormation template.",
                "Handler": "custom-resource.lambda_handler",
                "Role": {
                    "Fn::If": [
                        "AlbEndpoint",
                        {
                            "Fn::GetAtt": [
                                "AlbStack",
                                "Outputs",
                                "LambdaRoleCustomResourceArn"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "CloudFrontStack",
                                "Outputs",
                                "LambdaRoleCustomResourceArn"
                            ]
                        }
                    ]
                },
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "S3Bucket"
                                    ]
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": {
                        "Fn::Join": [
                            "/",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "SourceCode",
                                        "General",
                                        "KeyPrefix"
                                    ]
                                },
                                "custom-resource.zip"
                            ]
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "API_TYPE": {
                            "Fn::If": [
                                "AlbEndpoint",
                                "waf-regional",
                                "waf"
                            ]
                        },
                        "LOG_LEVEL": {
                            "Fn::FindInMap": [
                                "Solution",
                                "Data",
                                "LogLevel"
                            ]
                        }
                    }
                },
                "Runtime": "python3.7",
                "MemorySize": 128,
                "Timeout": 300
            }
        },
        "ConfigureAWSWAFLogs": {
            "Type": "Custom::ConfigureAWSWAFLogs",
            "Condition": "HttpFloodProtectionLogParserActivated",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaWAFCustomResourceFunction",
                        "Arn"
                    ]
                },
                "WAFWebACLArn": {
                    "Fn::If": [
                        "AlbEndpoint",
                        {
                            "Fn::GetAtt": [
                                "AlbStack",
                                "Outputs",
                                "WAFWebACLArn"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "CloudFrontStack",
                                "Outputs",
                                "WAFWebACLArn"
                            ]
                        }
                    ]
                },
                "DeliveryStreamArn": {
                    "Fn::GetAtt": [
                        "FirehoseAthenaStack",
                        "Outputs",
                        "FirehoseWAFLogsDeliveryStreamArn"
                    ]
                }
            }
        },
        "ConfigureAppAccessLogBucket": {
            "Type": "Custom::ConfigureAppAccessLogBucket",
            "Condition": "ScannersProbesProtectionActivated",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaWAFCustomResourceFunction",
                        "Arn"
                    ]
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "AppAccessLogBucket": {
                    "Ref": "AppAccessLogBucket"
                },
                "LambdaLogParserFunction": {
                    "Fn::If": [
                        "LogParser",
                        {
                            "Fn::GetAtt": [
                                "LambdaLogParserFunction",
                                "Arn"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "ScannersProbesLambdaLogParser": {
                    "Fn::If": [
                        "ScannersProbesLambdaLogParser",
                        "yes",
                        "no"
                    ]
                },
                "ScannersProbesAthenaLogParser": {
                    "Fn::If": [
                        "ScannersProbesAthenaLogParser",
                        "yes",
                        "no"
                    ]
                }
            }
        },
        "ConfigureWafLogBucket": {
            "Type": "Custom::ConfigureWafLogBucket",
            "Condition": "HttpFloodProtectionLogParserActivated",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaWAFCustomResourceFunction",
                        "Arn"
                    ]
                },
                "WafLogBucket": {
                    "Ref": "WafLogBucket"
                },
                "LambdaLogParserFunction": {
                    "Fn::If": [
                        "LogParser",
                        {
                            "Fn::GetAtt": [
                                "LambdaLogParserFunction",
                                "Arn"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "HttpFloodLambdaLogParser": {
                    "Fn::If": [
                        "HttpFloodLambdaLogParser",
                        "yes",
                        "no"
                    ]
                },
                "HttpFloodAthenaLogParser": {
                    "Fn::If": [
                        "HttpFloodAthenaLogParser",
                        "yes",
                        "no"
                    ]
                }
            }
        },
        "ConfigureRateBasedRule": {
            "Type": "Custom::ConfigureRateBasedRule",
            "Condition": "HttpFloodProtectionRateBasedRuleActivated",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaWAFCustomResourceFunction",
                        "Arn"
                    ]
                },
                "StackName": {
                    "Ref": "AWS::StackName"
                },
                "RequestThreshold": {
                    "Ref": "RequestThreshold"
                },
                "MetricNamePrefix": {
                    "Fn::Join": [
                        "",
                        {
                            "Fn::Split": [
                                "-",
                                {
                                    "Ref": "AWS::StackName"
                                }
                            ]
                        }
                    ]
                }
            }
        },
        "GenerateAppLogParserConfFile": {
            "Type": "Custom::GenerateAppLogParserConfFile",
            "Condition": "ScannersProbesLambdaLogParser",
            "DependsOn": "ConfigureAppAccessLogBucket",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaWAFCustomResourceFunction",
                        "Arn"
                    ]
                },
                "StackName": {
                    "Ref": "AWS::StackName"
                },
                "AppAccessLogBucket": {
                    "Ref": "AppAccessLogBucket"
                },
                "ErrorThreshold": {
                    "Ref": "ErrorThreshold"
                },
                "WAFBlockPeriod": {
                    "Ref": "WAFBlockPeriod"
                },
                "WAFScannersProbesSet": {
                    "Fn::If": [
                        "AlbEndpoint",
                        {
                            "Fn::GetAtt": [
                                "AlbStack",
                                "Outputs",
                                "WAFScannersProbesSet"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "CloudFrontStack",
                                "Outputs",
                                "WAFScannersProbesSet"
                            ]
                        }
                    ]
                }
            }
        },
        "GenerateWafLogParserConfFile": {
            "Type": "Custom::GenerateWafLogParserConfFile",
            "Condition": "HttpFloodLambdaLogParser",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaWAFCustomResourceFunction",
                        "Arn"
                    ]
                },
                "StackName": {
                    "Ref": "AWS::StackName"
                },
                "WafAccessLogBucket": {
                    "Ref": "WafLogBucket"
                },
                "RequestThreshold": {
                    "Ref": "RequestThreshold"
                },
                "WAFBlockPeriod": {
                    "Ref": "WAFBlockPeriod"
                },
                "WAFHttpFloodSet": {
                    "Fn::If": [
                        "AlbEndpoint",
                        {
                            "Fn::GetAtt": [
                                "AlbStack",
                                "Outputs",
                                "WAFHttpFloodSet"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "CloudFrontStack",
                                "Outputs",
                                "WAFHttpFloodSet"
                            ]
                        }
                    ]
                }
            }
        },
        "ConfigureWebAcl": {
            "Type": "Custom::ConfigureWebAcl",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaWAFCustomResourceFunction",
                        "Arn"
                    ]
                },
                "ActivateSqlInjectionProtectionParam": {
                    "Ref": "ActivateSqlInjectionProtectionParam"
                },
                "ActivateCrossSiteScriptingProtectionParam": {
                    "Ref": "ActivateCrossSiteScriptingProtectionParam"
                },
                "ActivateHttpFloodProtectionParam": {
                    "Ref": "ActivateHttpFloodProtectionParam"
                },
                "ActivateScannersProbesProtectionParam": {
                    "Ref": "ActivateScannersProbesProtectionParam"
                },
                "ActivateReputationListsProtectionParam": {
                    "Ref": "ActivateReputationListsProtectionParam"
                },
                "ActivateBadBotProtectionParam": {
                    "Ref": "ActivateBadBotProtectionParam"
                },
                "ProtectionActivatedSqlInjection": {
                    "Fn::If": [
                        "SqlInjectionProtectionActivated",
                        "yes",
                        "no"
                    ]
                },
                "ProtectionActivatedCrossSiteScripting": {
                    "Fn::If": [
                        "CrossSiteScriptingProtectionActivated",
                        "yes",
                        "no"
                    ]
                },
                "ProtectionActivatedHttpFloodRateBased": {
                    "Fn::If": [
                        "HttpFloodProtectionRateBasedRuleActivated",
                        "yes",
                        "no"
                    ]
                },
                "ProtectionActivatedHttpFloodRegular": {
                    "Fn::If": [
                        "HttpFloodProtectionLogParserActivated",
                        "yes",
                        "no"
                    ]
                },
                "ProtectionActivatedScannersProbes": {
                    "Fn::If": [
                        "ScannersProbesProtectionActivated",
                        "yes",
                        "no"
                    ]
                },
                "ProtectionActivatedReputationLists": {
                    "Fn::If": [
                        "ReputationListsProtectionActivated",
                        "yes",
                        "no"
                    ]
                },
                "ProtectionActivatedBadBot": {
                    "Fn::If": [
                        "BadBotProtectionActivated",
                        "yes",
                        "no"
                    ]
                },
                "WAFWebACL": {
                    "Fn::If": [
                        "AlbEndpoint",
                        {
                            "Fn::GetAtt": [
                                "AlbStack",
                                "Outputs",
                                "WAFWebACL"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "CloudFrontStack",
                                "Outputs",
                                "WAFWebACL"
                            ]
                        }
                    ]
                },
                "WAFWhitelistRule": {
                    "Fn::If": [
                        "AlbEndpoint",
                        {
                            "Fn::GetAtt": [
                                "AlbStack",
                                "Outputs",
                                "WAFWhitelistRule"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "CloudFrontStack",
                                "Outputs",
                                "WAFWhitelistRule"
                            ]
                        }
                    ]
                },
                "WAFBlacklistRule": {
                    "Fn::If": [
                        "AlbEndpoint",
                        {
                            "Fn::GetAtt": [
                                "AlbStack",
                                "Outputs",
                                "WAFBlacklistRule"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "CloudFrontStack",
                                "Outputs",
                                "WAFBlacklistRule"
                            ]
                        }
                    ]
                },
                "WAFSqlInjectionRule": {
                    "Fn::If": [
                        "SqlInjectionProtectionActivated",
                        {
                            "Fn::If": [
                                "AlbEndpoint",
                                {
                                    "Fn::GetAtt": [
                                        "AlbStack",
                                        "Outputs",
                                        "WAFSqlInjectionRule"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "CloudFrontStack",
                                        "Outputs",
                                        "WAFSqlInjectionRule"
                                    ]
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFXssRule": {
                    "Fn::If": [
                        "CrossSiteScriptingProtectionActivated",
                        {
                            "Fn::If": [
                                "AlbEndpoint",
                                {
                                    "Fn::GetAtt": [
                                        "AlbStack",
                                        "Outputs",
                                        "WAFXssRule"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "CloudFrontStack",
                                        "Outputs",
                                        "WAFXssRule"
                                    ]
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFHttpFloodRateBasedRule": {
                    "Fn::If": [
                        "HttpFloodProtectionRateBasedRuleActivated",
                        {
                            "Fn::GetAtt": [
                                "ConfigureRateBasedRule",
                                "RateBasedRuleId"
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFHttpFloodRegularRule": {
                    "Fn::If": [
                        "HttpFloodProtectionLogParserActivated",
                        {
                            "Fn::If": [
                                "AlbEndpoint",
                                {
                                    "Fn::GetAtt": [
                                        "AlbStack",
                                        "Outputs",
                                        "WAFHttpFloodRegularRule"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "CloudFrontStack",
                                        "Outputs",
                                        "WAFHttpFloodRegularRule"
                                    ]
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFScannersProbesRule": {
                    "Fn::If": [
                        "ScannersProbesProtectionActivated",
                        {
                            "Fn::If": [
                                "AlbEndpoint",
                                {
                                    "Fn::GetAtt": [
                                        "AlbStack",
                                        "Outputs",
                                        "WAFScannersProbesRule"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "CloudFrontStack",
                                        "Outputs",
                                        "WAFScannersProbesRule"
                                    ]
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFIPReputationListsRule": {
                    "Fn::If": [
                        "ReputationListsProtectionActivated",
                        {
                            "Fn::If": [
                                "AlbEndpoint",
                                {
                                    "Fn::GetAtt": [
                                        "AlbStack",
                                        "Outputs",
                                        "WAFIPReputationListsRule"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "CloudFrontStack",
                                        "Outputs",
                                        "WAFIPReputationListsRule"
                                    ]
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFBadBotRule": {
                    "Fn::If": [
                        "BadBotProtectionActivated",
                        {
                            "Fn::If": [
                                "AlbEndpoint",
                                {
                                    "Fn::GetAtt": [
                                        "AlbStack",
                                        "Outputs",
                                        "WAFBadBotRule"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "CloudFrontStack",
                                        "Outputs",
                                        "WAFBadBotRule"
                                    ]
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "ActionWAFWhitelistRule": {
                    "Fn::FindInMap": [
                        "Solution",
                        "Action",
                        "WAFWhitelistRule"
                    ]
                },
                "ActionWAFBlacklistRule": {
                    "Fn::FindInMap": [
                        "Solution",
                        "Action",
                        "WAFBlacklistRule"
                    ]
                },
                "ActionWAFSqlInjectionRule": {
                    "Fn::FindInMap": [
                        "Solution",
                        "Action",
                        "WAFSqlInjectionRule"
                    ]
                },
                "ActionWAFXssRule": {
                    "Fn::FindInMap": [
                        "Solution",
                        "Action",
                        "WAFXssRule"
                    ]
                },
                "ActionWAFHttpFloodRateBasedRule": {
                    "Fn::FindInMap": [
                        "Solution",
                        "Action",
                        "WAFHttpFloodRateBasedRule"
                    ]
                },
                "ActionWAFHttpFloodRegularRule": {
                    "Fn::FindInMap": [
                        "Solution",
                        "Action",
                        "WAFHttpFloodRegularRule"
                    ]
                },
                "ActionWAFScannersProbesRule": {
                    "Fn::FindInMap": [
                        "Solution",
                        "Action",
                        "WAFScannersProbesRule"
                    ]
                },
                "ActionWAFIPReputationListsRule": {
                    "Fn::FindInMap": [
                        "Solution",
                        "Action",
                        "WAFIPReputationListsRule"
                    ]
                },
                "ActionWAFBadBotRule": {
                    "Fn::FindInMap": [
                        "Solution",
                        "Action",
                        "WAFBadBotRule"
                    ]
                },
                "WAFWhitelistSet": {
                    "Fn::If": [
                        "AlbEndpoint",
                        {
                            "Fn::GetAtt": [
                                "AlbStack",
                                "Outputs",
                                "WAFWhitelistSet"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "CloudFrontStack",
                                "Outputs",
                                "WAFWhitelistSet"
                            ]
                        }
                    ]
                },
                "WAFBlacklistSet": {
                    "Fn::If": [
                        "AlbEndpoint",
                        {
                            "Fn::GetAtt": [
                                "AlbStack",
                                "Outputs",
                                "WAFBlacklistSet"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "CloudFrontStack",
                                "Outputs",
                                "WAFBlacklistSet"
                            ]
                        }
                    ]
                },
                "WAFHttpFloodSet": {
                    "Fn::If": [
                        "HttpFloodProtectionLogParserActivated",
                        {
                            "Fn::If": [
                                "AlbEndpoint",
                                {
                                    "Fn::GetAtt": [
                                        "AlbStack",
                                        "Outputs",
                                        "WAFHttpFloodSet"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "CloudFrontStack",
                                        "Outputs",
                                        "WAFHttpFloodSet"
                                    ]
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFScannersProbesSet": {
                    "Fn::If": [
                        "ScannersProbesProtectionActivated",
                        {
                            "Fn::If": [
                                "AlbEndpoint",
                                {
                                    "Fn::GetAtt": [
                                        "AlbStack",
                                        "Outputs",
                                        "WAFScannersProbesSet"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "CloudFrontStack",
                                        "Outputs",
                                        "WAFScannersProbesSet"
                                    ]
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFReputationListsSet": {
                    "Fn::If": [
                        "ReputationListsProtectionActivated",
                        {
                            "Fn::If": [
                                "AlbEndpoint",
                                {
                                    "Fn::GetAtt": [
                                        "AlbStack",
                                        "Outputs",
                                        "WAFReputationListsSet"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "CloudFrontStack",
                                        "Outputs",
                                        "WAFReputationListsSet"
                                    ]
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "WAFBadBotSet": {
                    "Fn::If": [
                        "BadBotProtectionActivated",
                        {
                            "Fn::If": [
                                "AlbEndpoint",
                                {
                                    "Fn::GetAtt": [
                                        "AlbStack",
                                        "Outputs",
                                        "WAFBadBotSet"
                                    ]
                                },
                                {
                                    "Fn::GetAtt": [
                                        "CloudFrontStack",
                                        "Outputs",
                                        "WAFBadBotSet"
                                    ]
                                }
                            ]
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "UUID": {
                    "Fn::GetAtt": [
                        "CreateUniqueID",
                        "UUID"
                    ]
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "RequestThreshold": {
                    "Ref": "RequestThreshold"
                },
                "ErrorThreshold": {
                    "Ref": "ErrorThreshold"
                },
                "WAFBlockPeriod": {
                    "Ref": "WAFBlockPeriod"
                },
                "SendAnonymousUsageData": {
                    "Fn::FindInMap": [
                        "Solution",
                        "Data",
                        "SendAnonymousUsageData"
                    ]
                }
            }
        },
        "PopulateReputationList": {
            "Type": "Custom::PopulateReputationList",
            "Condition": "ReputationListsProtectionActivated",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaWAFCustomResourceFunction",
                        "Arn"
                    ]
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "LambdaWAFReputationListsParserFunction": {
                    "Fn::GetAtt": [
                        "LambdaWAFReputationListsParserFunction",
                        "Arn"
                    ]
                },
                "WAFReputationListsSet": {
                    "Fn::If": [
                        "AlbEndpoint",
                        {
                            "Fn::GetAtt": [
                                "AlbStack",
                                "Outputs",
                                "WAFReputationListsSet"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "CloudFrontStack",
                                "Outputs",
                                "WAFReputationListsSet"
                            ]
                        }
                    ]
                }
            }
        },
        "MonitoringDashboard": {
            "Type": "AWS::CloudWatch::Dashboard",
            "DependsOn": "CheckRequirements",
            "Properties": {
                "DashboardName": {
                    "Fn::Sub": "${AWS::StackName}-${AWS::Region}"
                },
                "DashboardBody": {
                    "Fn::Sub": [
                        "{\n  \"widgets\": [{\n    \"type\": \"metric\",\n    \"x\": 0,\n    \"y\": 0,\n    \"width\": 15,\n    \"height\": 10,\n    \"properties\": {\n      \"view\": \"timeSeries\",\n      \"stacked\": false,\n      \"stat\": \"Sum\",\n      \"period\": 300,\n      \"metrics\": [\n        [\"WAF\", \"BlockedRequests\", \"WebACL\", \"${WAFWebACLMetricName}\", \"Rule\", \"ALL\" ${RegionMetric}],\n        [\"WAF\", \"AllowedRequests\", \"WebACL\", \"${WAFWebACLMetricName}\", \"Rule\", \"ALL\" ${RegionMetric}]\n      ],\n      \"region\": \"${RegionProperties}\"\n    }\n  }]\n}",
                        {
                            "WAFWebACLMetricName": {
                                "Fn::If": [
                                    "AlbEndpoint",
                                    {
                                        "Fn::GetAtt": [
                                            "AlbStack",
                                            "Outputs",
                                            "WAFWebACLMetricName"
                                        ]
                                    },
                                    {
                                        "Fn::GetAtt": [
                                            "CloudFrontStack",
                                            "Outputs",
                                            "WAFWebACLMetricName"
                                        ]
                                    }
                                ]
                            },
                            "RegionMetric": {
                                "Fn::If": [
                                    "AlbEndpoint",
                                    {
                                        "Fn::Sub": ", \"Region\", \"${AWS::Region}\""
                                    },
                                    ""
                                ]
                            },
                            "RegionProperties": {
                                "Fn::If": [
                                    "AlbEndpoint",
                                    {
                                        "Fn::Sub": "${AWS::Region}"
                                    },
                                    "us-east-1"
                                ]
                            }
                        }
                    ]
                }
            }
        }
    },
    "Outputs": {
        "BadBotHoneypotEndpoint": {
            "Description": "Bad Bot Honeypot Endpoint",
            "Value": {
                "Fn::Sub": "https://${ApiGatewayBadBot}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayBadBotStage}"
            },
            "Condition": "BadBotProtectionActivated"
        },
        "WAFWebACL": {
            "Description": "AWS WAF WebACL ID",
            "Value": {
                "Fn::If": [
                    "AlbEndpoint",
                    {
                        "Fn::GetAtt": [
                            "AlbStack",
                            "Outputs",
                            "WAFWebACL"
                        ]
                    },
                    {
                        "Fn::GetAtt": [
                            "CloudFrontStack",
                            "Outputs",
                            "WAFWebACL"
                        ]
                    }
                ]
            }
        },
        "WafLogBucket": {
            "Value": {
                "Ref": "WafLogBucket"
            },
            "Condition": "HttpFloodProtectionLogParserActivated"
        },
        "AppAccessLogBucket": {
            "Value": {
                "Ref": "AppAccessLogBucket"
            },
            "Condition": "ScannersProbesProtectionActivated"
        }
    }
}